

from functools import partial

include: "get_annotations.rules"

def get_fasta_file(wildcards):

    if 'fasta' in config['genome'] and not config['genome']['fasta'] is None:
        return config['genome']['fasta']
    elif 'species' in config['genome']:
        return rules.download_fasta.output
    else:
        raise ValueError('Neither "fasta" nor "species" configured. Cannot obtain fasta file.')


rule generate_index:
    input:
        get_fasta_file
    output:
        '{directory}/annotations/chromap-index.idx'
    params:
        min_fragment_length = config['mapping']['min_fragment_length'],
    shell:
        'chromap -i --min-frag-length {params.min_fragment_length} -r {input} -o {output}'


rule concatenate_lanes:
    input:
        lambda wildcards : config['data'][wildcards.batch][wildcards.sample]['fastqs'][wildcards.read_no]
    output:
        temp('{directory}/{batch}/{sample}/reads-{read_no}.fastq.gz')
    shell:
        'cat {input} > {output}'
        

def get_reads_file(wildcards,*,read_no):

    reads = config['data'][wildcards.batch][wildcards.sample]['fastqs']['R' + str(read_no)]
    if len(reads) > 1:
        return rules.concatenate_lanes.output[0].format(
            directory = wildcards.directory, batch = wildcards.batch,
            sample = wildcards.sample, read_no = 'R' + str(read_no)
        )
    else:
        return reads


rule scatac_chromap:
    input:
        r1 = partial(get_reads_file, read_no = 1),
        r3 = partial(get_reads_file, read_no = 3),
        barcode = partial(get_reads_file, read_no = 2),
        index = rules.generate_index.output,
        fasta = get_fasta_file,
    output:
        temp('{directory}/{batch}/{sample}/fragments.bed')
    threads: config['mapping']['cores']
    params:
        fasta = config["genome"]["fasta"],
        whitelist = config['whitelist']["whitelist"],
        whitelist_match = config["whitelist"]["whitelist_match"],
        barcode_start = lambda w : config["barcode"][w.batch]['start'],
        barcode_end = lambda w : config["barcode"][w.batch]['start'] + config['barcode'][w.batch]['length'] - 1,
        strand = lambda w : config['barcode'][w.batch]['strand'],
    shell:
        """
chromap \
--preset atac -x {input.index} \
-r {input.fasta} -1 {input.r1} -2 {input.r3} \
-o {output} -b {input.barcode} \
--read-format bc:{params.barcode_start}:{params.barcode_end}:{params.strand} \
--barcode-translate {params.whitelist_match} \
-t {threads} --barcode-whitelist {params.whitelist}
        """

rule compress_bedfile:
    input:
        rules.scatac_chromap.output
    output:
        protected('{directory}/{batch}/{sample}/fragments.bed.gz')
    shell:
        'gzip -c {input} > {output}'